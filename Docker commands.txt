1. Create a Simple page:
index.html

2.Create a Dockerfile:
nano Dockerfile

with the following content:

FROM python:3.8-slim
WORKDIR /app
COPY . /app
CMD ["python", "-m", "http.server", "8080"]

3. Build the Docker Image:
docker build -t mypythonapp .

4. confirm if the file correctly copied in the app
docker run -it mypythonapp /bin/bash
ls 

you should see app.py there.

5.Run the Docker Container:
docker run mypythonapp

6. View running containers: 
docker ps

7. View all containers (including stopped ones): 
docker ps -a

8. Stop a running container (you can get the container id from the previous step): 
docker stop container_id

// to stop all the running containers:
docker stop $(docker ps -q)

9. Remove a container: 
docker rm container_id

10. View images: 
docker images

11. remove image:
docker rmi image_name

12. force remove image:
docker rmi -f image_name

13. remove all the stopped containers, not used networks, all images, all build cache:
docker system prune -a

14. remove all stopped containers
docker container prune

15. create docker-compose.yml with the following contents:
version: '3'
services:
  mypythonapp:
    build: .
    ports:
      - "8080:8080"

16. Build and Run with Docker Compose:
sudo apt install docker-compose
docker-compose up

The project can be started now on http://serve_ip_address:8080/

******************
Networks:
1. Bridge network (between two containers)
// create bridge network:
docker network create demo-network -d bridge

// create a new container and attach it to the created network:
docker run -it --rm --name container1 --network demo-network busybox:latest

// creating a second container in another terminal:
docker run -it --rm --name container2 busybox:latest

// join the second container to the same network:
docker network connect demo-network container2

// now in the first terminal (with container1) type:
ping container2


2. Host network
// run nginx on docker using the network host:
docker run -d --name nginx --network host nginx:latest

// check if the nginx server is accessible on port 80:
curl localhost:80

3. Disable a network:
// set network to none
docker run -it --rm --network none busybox:latest

// ping (it should show bad address 'google.com')
ping google.com

4. Remove container from a network:
docker network disconnect demo-network container2

5. Managing networks:
// list all the docker networks:
docker network ls

// remove certain network:
docker network rm demo-network

// delete all unused networks:
docker network prune

6. Netowrks in docker compose:
// docker-compose.yml automatically create a newtork:
******
version: "3"
services:
  app:
    image: php:7.2-apache
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: changeme
******

// after saving the file above run it with:
docker compose up -d

// check the automatic created network:
docker network ls

// connect to the current contianer app and try to ping the mysql:
docker compose exec -it app bash // opens the bash 
apt update && apt install iputils-ping -y // installs ping
ping mysql

// We can also add networks in docker-compose.yml file:
**********
version: "3"
services:

  app:
    image: php:7.2-apache
    networks:
      - db
  helper:
    image: custom-image:latest
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: changeme
    networks:
      - db
networks:
  db:
**********